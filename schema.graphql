

type Query {
  personalInfo: PersonalInfo!
  education: [Education!]!
  experience: [Experience!]!
  skills: [Skills!]!
  activities: [Activitiies!]!
  projects: [Projects!]!
  resume: Resume!
  me: User! @auth
  users: [User!]! 
}


  type PersonalInfo {
  name: String!
  age: Int!
  email: String!
  phoneNumber: String
  linkedIn: String
  githubUsername: String!
  githubProfileImage: String!
  personalSiteLink: String
  currentCity: String!
  pets: [String!]!

}

type Education {
  institution: String!
  degree: String!
  fieldOfStudy: String!
  startDate: String!
  endDate: String
}

type Experience {
  company: String!
  position: String!
  startDate: String!
  endDate: String
  responsibilities: [String!]!
}

type Skills {
  skillName: String!
  proficiency: String!
}
type Activitiies{
    activityName: String!
    description: String!
}
type Projects{
    projectName: String!
    description: String!
    link:String!

}

type Resume {
  personalInfo: PersonalInfo!
  education: [Education!]!
  experience: [Experience!]!
  skills: [Skills!]!
  activities: [Activitiies!]!
  projects: [Projects!]!
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  createuser(input: UserInput!): User!
  createpost(input: PostInput!): Post!
  createPersonalInfo(name: String!, age: Int!, email: String!, phoneNumber: String, linkedIn: String, githubUsername: String!, githubProfileImage: String!, personalSiteLink: String, currentCity: String!, pets: [String!]!): PersonalInfo!
  updatePersonalInfo(name: String!, age: Int!, email: String!, phoneNumber: String, linkedIn: String, githubUsername: String!, githubProfileImage: String!, personalSiteLink: String, currentCity: String!, pets: [String!]!): PersonalInfo!
  createProject(projectName: String!, description: String!, link: String!): Projects!
  updateProject(projectName: String!, description: String!, link: String!): Projects!
  deleteProject(projectName: String!): Projects!
  createEducation(institution: String!, degree: String!, fieldOfStudy: String!, startDate: String!, endDate: String): Education!
  createskills(skillName: String!, proficiency: String!): Skills!
  createExperience(company: String!, position: String!, startDate: String!, endDate: String, responsibilities: [String!]!): Experience!
  updateExperience(company: String!, position: String!, startDate: String!, endDate: String, responsibilities: [String!]!): Experience!
}

input UserInput {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: role!
}

input PostInput {
  title: String!
  content: String!
  author: ID!
}


 type Schema {
    query: Query
    mutation: Mutation
  }



directive @auth on FIELD_DEFINITION
type User {
  id: ID!
  name: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
}

type AuthPayload {
  token: String!
}

enum role {
  ADMIN
  USER
  GUEST
  }



  input AuthPayloadInput {
    token: String!
  }

  